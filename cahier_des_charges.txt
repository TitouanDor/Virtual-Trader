**Cahier des Charges : Virtual Trader**

**1. Nom du Projet** : Virtual Trader

**2. Objectif du Projet** : Concevoir une application de gestion de portefeuille d'actions virtuelles permettant aux utilisateurs d'acheter, vendre et suivre des actions virtuelles en temps quasi réel.

**3. Description du Jeu** :
   -   Les utilisateurs débutent avec un capital initial de 10 000€.
   -   Ils peuvent acheter et vendre des actions virtuelles parmi une liste prédéfinie.
   -   Chaque action possède un code, une description et une valeur d'achat.
   -   Certaines actions distribuent des dividendes annuels.
   -   Un joueur perd lorsque la valeur de son portefeuille (actions + liquidités) descend en dessous de 1000€.
   
**4. Fonctionnalités Générales** :
   -   Inscription (email, mot de passe, nom, prénom, username).
   -   Connexion sécurisée.
   -   Modification du mot de passe.
   -   Recherche de joueurs et suivi de leurs actions.


**5. Fonctionnalités Propres au Jeu** :
   -   Initialisation et reprise du jeu.
   -   Visualisation de l'état du jeu :
       -   Argent disponible.
       -   Liste des actions possédées.
       -   Évolution de la valeur du portefeuille sur les 12 derniers mois (graphique).
   -   Recherche et filtrage des actions :
       -   Par nom.
       -   Par prix.
       -   Par pourcentage de progression sur 1 mois.
       -   Par pourcentage de progression sur 1 an.
   -   Visualisation de l'évolution du prix d'une action sur les 12 derniers mois.
   -   Achat et vente d'actions.
   -   Visualisation du classement des joueurs.
   -   Déroulement des tours de jeu.

**6. Déroulement d'un Tour de Jeu** :
   -   Le jeu fonctionne en pseudo temps réel.
   -   Les actions des joueurs sont appliquées immédiatement.
   -   À intervalle régulier (par exemple, toutes les minutes) :
       -   La date du jeu avance d'un mois.
       -   Les dividendes sont versés.
       -   Les valeurs des actions sont mises à jour :
           -   L'évolution du prix est calculée à partir de l'évolution du prix du mois précédent auquel on ajoute aléatoirement une valeur comprise entre -3 et +3 points, sans pouvoir dépasser les bornes -10% et +10% et sans pouvoir descendre en dessous de 1€ par action.

**7. Contraintes Techniques** :
   -   Utilisation de MySQL pour la gestion de la base de données.
   -   Utilisation de PHP pour le développement de l'application.
   -   Gestion de la sécurité des données (mots de passe, informations personnelles).
   - La base de donnée est déjà créer. Elle se nomme virtual_trader

**8. Environnement de Développement** :
   -   Serveur web avec support PHP.
   -   Serveur de base de données MySQL.
   -   IDE pour le développement PHP (par exemple, VS Code, PhpStorm).

**9. Étapes de Développement** :
   - La base de donnée est créer. Elle contient la table : `joueur`, `actions`, `portefeuille`, `historique`, `game_state`, `cours_marche`. 
   - La table `joueur` contient les champs : id, email, mdp, nom, prenom, username, argent. Elle sert à stocker les informations des joueurs.
   - La table `actions` contient les champs : id, nom, description, prix, dividende, date_dividende. Elle sert à stocker les informations des actions.
   - La table `portefeuille` contient les champs : id, player_id, stock_id, quantity, purchase_price, purchase_date. Elle sert à stocker les informations des actions que possède les joueurs.
   - La table `historique` contient les champs : id, stock_id, player_id, price, nature, game_month, game_year, real_date. Elle sert à stocker les changements de prix des actions, et l'historique des achat et des ventes.
   - La table `game_state` contient les champs : id, current_month, current_year, last_update. Elle sert à stocker l'état du jeux.
   - La table `cours_marche` contient les champs : stock_id, game_month, game_year, valeur_action. Elle sert à stocker le cours du marcher.
   - Le fichier `inscription.php` permet de créer un compte. Il contient les champs : prenom, nom, username, e-mail, mdp.
   - Le fichier `inscriptionScript.php` permet de traiter la création d'un compte. Il vérifie si l'email est unique et crée un nouveau joueur dans la base de donnée
   - Le fichier `connectionScript.php` est censé permettre la connexion d'un joueur. Le code n'est pas bon, car il hash le mot de passe et ne permet pas de valider le mot de passe. Le mot de passe doit être comparé grâce à la fonction password_verify.
   - Le fichier `marcher.php` permet d'afficher les actions disponibles avec leur nom, description et prix.
   - Le fichier `actionDuTemps.php` est censé permettre de faire avancer le jeux, il n'est pas implémenter.
   - Le fichier `pageAction.php` est censé permettre d'afficher plus de détail sur une action, il n'est pas implémenter.
   - Le fichier `profil.php` est censé permettre d'afficher le profil du joueur, il n'est pas implémenter.
   - Correction de la connexion à la base de donnée, car elle utilise root sans mot de passe. 
   - Ajouter du contenu au fichier README.md.
   - Ajouter la table followers a la base de données.
   - Modifier la table joueur dans le fichier inscriptionScript.php pour que les joueur commence avec 10000 et non pas 1000.
   - Correction du fichier connectionScript.php pour qu'il puisse connecter un utilisateur
   - Implémenter le fichier actionDuTemps.php pour faire évoluer le jeux.
   - Implémenter le fichier pageAction.php pour afficher les informations sur une action.
   - Implémenter le fichier profil.php pour afficher le profil du joueur.
   
   
   -   Configuration de l'environnement :
       -   Installation et configuration de MySQL.
       -   Installation et configuration de PHP.
       -   Création de la base de données.
   -   Conception de la base de données :
       -   Définition des tables (utilisateurs, actions, portefeuilles, transactions, dividendes, etc.).
       -   Définition des champs et des relations entre les tables.
   -   Développement de l'authentification :
       -   Formulaires d'inscription et de connexion.
       -   Gestion des sessions.
       -   Fonction de modification du mot de passe.
   -   Développement du modèle de jeu :
       -   Classes et fonctions pour gérer les joueurs, les actions, les portefeuilles, les dividendes.
       -   Fonction de mise à jour des prix des actions.
   -   Développement des fonctionnalités du jeu :
       -   Initialisation et reprise du jeu.
       -   Affichage de l'état du jeu.
       -   Recherche et filtrage des actions.
       -   Affichage de l'évolution du prix d'une action.
       -   Achat/vente d'actions.
       -   Classement des joueurs.
       -   Déroulement des tours de jeu.
   -   Développement de la fonction recherche et suivi :
       -   Formulaire de recherche de joueur.
       - Affichage des derniers achats et ventes.

**10. Tests** :
    -   Tests unitaires : Vérification du bon fonctionnement de chaque fonctionnalité individuellement.
    -   Tests d'intégration : Vérification de la cohérence et de la communication entre les différents modules.
    -   Tests fonctionnels : Vérification que le jeu et toutes ses fonctionnalités répondent aux attentes.

